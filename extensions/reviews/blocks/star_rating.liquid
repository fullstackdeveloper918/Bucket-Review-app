

<style>
@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&display=swap');
h1, h2, h3 , h4 ,h5 , p , div , span , button { 
    font-family: "Nunito Sans", sans-serif ;
}
.popup {
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.4);
  display: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  text-align: center;
  .popup__content {
    width: 80%;
    overflow:auto;
    padding: 50px;
    background: white;
    color: black;
    position: relative;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    box-sizing: border-box;
    .close {
      position: absolute;
      right: 20px;
      top: 20px;
      width: 20px;
      display: block;
      span {
        cursor: pointer;
        position: fixed;
        width: 20px;
        height: 3px;
        background: #000;
        &:nth-child(1) {
          transform: rotate(45deg);
        }
        &:nth-child(2) {
          transform: rotate(135deg);
        }
      }
    }
  }
}
.review_main {
  color: white;
  padding: 5px 0px;
  cursor: pointer;
  border: none;
}
.review_main button {
    width: 100%;
    border-radius: 12px;
    font-size: 14px;
    font-weight: 600;
}
progress {
  direction:rtl;
  width: 100%;
  appearance: none; /* Removes the default styles */
  -webkit-appearance: none;
  -moz-appearance: none;
  background: #f0f0f0; /* Background color */
  border-radius: 5px;
  height: 6px;
  overflow: hidden; /* Ensures border-radius is applied */
  position: relative;
}

/* Progress bar fill color for WebKit browsers */
progress::-webkit-progress-value {
  background: #000; /* Yellow color for the fill */
  border-radius: 5px;
}

/* Progress bar background for WebKit browsers */
progress::-webkit-progress-bar {
  background: #f0f0f0; /* Light gray background */
  border-radius: 5px;
}

/* Progress bar fill color for Firefox */
progress::-moz-progress-bar {
  background: #0000; /* Yellow color for the fill */
  border-radius: 5px;
}
.progress_bar {
    width: 90%;
}

.bucket_review_main h4:first-child {
  margin-top: 20px;
    text-align: center;
    margin-bottom: 10px ;
}
div#ratings-container div div {
    flex-direction: row-reverse;
}
.bucket_main {
    width: 100%;
    height: 100%;
    margin: 10% 0;
}
.highest_reviews {
    margin-top: 1.5rem;
}
</style>
<div class="bucket_main">
<div class="bucket_review" product_id="{{ product.id }}" style="border: 1px solid #f0f0f0; border-radius: 10px; padding: 20px; box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1); background: #fff; text-align: center; font-family: 'Arial', sans-serif;">
  
<h4 style="font-size: 2.8rem; color: #000; font-weight: 600;">Customer Reviews</h4>
  
  <!-- Average Rating Display -->
  <div class="highest_reviews" style="font-size: 2rem; font-weight: bold; color: #000;">
    
  </div>
  
  <!-- Star Ratings Display -->
  <div  class="highest_review_main">
    <!-- Render Stars Dynamically -->
    <div style="color: #FABF35; font-size: 3.5rem;" class="highest_review_color">
      {% comment %} &#9733;&#9733;&#9733;&#9733;&#9734; {% endcomment %}
    </div>
  </div>
  
  <div style="color: #666; font-size: 1rem;" class="total_reviews">
    <h3></h3>
  </div>

  <!-- Rating Distribution -->
  <div>
    <div id="ratings-container" style="width: 100%;">

  <!-- Template for Progress Bars -->
  <div>
    <div style="display: flex; justify-content: space-between;">
      <span>5 Stars</span>
      <div class="progress_bar">
      <progress style="background: #f0f0f0; border-radius: 12px; height: 12px; position: relative;" id="progress-bar-1" value="5" max="5"></progress>

    </div>
      <span id="five-stars-count" style="color: #000; font-weight: bold;">33</span>
    </div>

  </div>

  <div>
    <div style="display: flex; justify-content: space-between;">
      <span>4 Stars</span>
      <div class="progress_bar">
      <progress style="background: #f0f0f0; border-radius: 12px; height: 12px; position: relative;" id="progress-bar-1" value="4" max="5"></progress>

    </div>
      <span id="five-stars-count" style="color: #000; font-weight: bold;">32</span>

    </div>
  </div>

  <div>
    <div style="display: flex; justify-content: space-between;">
      <span>3 Stars</span>
      <div class="progress_bar">
      <progress style="background: #f0f0f0; border-radius: 12px; height: 12px; position: relative;" id="progress-bar-1" value="3" max="5"></progress>

    </div>
      <span id="five-stars-count" style="color: #000; font-weight: bold;">52</span>
    
    </div>
  </div>  
  
  <div>
    <div style="display: flex; justify-content: space-between;">
      <span>2 Stars</span>
      <div class="progress_bar">
      <progress style="background: #f0f0f0; border-radius: 12px; height: 12px; position: relative;" id="progress-bar-1" value="2" max="5"></progress>

    </div>
      <span id="five-stars-count" style="color: #000; font-weight: bold;">12</span>
    
    </div>
   </div>
    <div>
      <div style="display: flex; justify-content: space-between;">
        <span>1 Stars</span>
        <div class="progress_bar">
          <progress style="background: #f0f0f0; border-radius: 12px; height: 12px; position: relative;" id="progress-bar-1" value="1" max="5"></progress>

        </div>
        <span id="five-stars-count" style="color: #000; font-weight: bold;">32</span>
      
      </div>
      
  </div>    

    <!-- Repeat for other star ratings (4 Stars, 3 Stars, etc.) -->
    <!-- Similar structure as the 5 Stars block -->
  </div>
  </div>
  <div class="review_main">  <button 
  style="margin-top: 20px; background: #333; color: #fff; padding: 12px 20px; border: none; cursor: pointer; transition: background 0.3s;"
  onclick="showReviewForm()">
  Add A Review
  </button></div>
  <!-- Add Review Button -->
 
</div>
</div>
<section class="popup">
  <div class="popup__content">
    <div class="close">
      <span></span>
      <span></span>
    </div>
     

<!-- Review Form -->
<div id="review-form" style="margin-top: 20px; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);">
 <h3>Add Your Review</h3>
<form id="reviewForm" enctype="multipart/form-data">
  <!-- Dynamic Rating Inputs -->
  <div id="dynamic-rating" style="display: flex; justify-content: center; margin-bottom: 15px;">
    <span class="dynamic-star" data-value="1">&#9733;</span>
    <span class="dynamic-star" data-value="2">&#9733;</span>
    <span class="dynamic-star" data-value="3">&#9733;</span>
    <span class="dynamic-star" data-value="4">&#9733;</span>
    <span class="dynamic-star" data-value="5">&#9733;</span>
  </div>

  <input type="hidden" name="rating" id="rating-input" />
  <input type="hidden" name="productId" value="{{ product.id }}" />
  <input type="hidden" name="shopDomain" value="{{ shop.domain }}" />


  <input
    type="text"
    name="userName"
    placeholder="Your Name"
    style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 5px; font-size: 1rem;"
    required
  />
  <input
    type="email"
    name="userEmail"
    placeholder="Your Email"
    style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 5px; font-size: 1rem;"
    required
  />
  <input
    type="file"
    name="reviewFiles"
    id="reviewFiles"
    style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 5px; font-size: 1rem;"
    multiple
  />
  
  <textarea
    name="comment"
    placeholder="Leave a comment"
    style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 5px; font-size: 1rem;"
    required
  ></textarea>

  <button
    type="button"
    id="submitReview"
    style="padding: 10px 20px; background: #ffcc00; border-radius: 25px; border: none; font-size: 1rem; color: #333; cursor: pointer; transition: background 0.3s;"
  >
    Submit Review
  </button>
</form>

<div id="responseMessage" style="margin-top: 20px; color: green;"></div>


</div>

  </div>
</section>
<section class="customerreview_data">
  <div class="cutomers_All_reviews">
    
  </div>

</section>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get the product ID from the element
    const productId = document.querySelector('.bucket_review').getAttribute('product_id');

    // Fetch reviews for the product
    fetch(`https://pvc-agent-gonna-saturday.trycloudflare.com/test/productId?productId=${productId}`)
        .then(response => response.json())
        .then(reviews => {
            // Log the reviews array to the console
            console.log(reviews);

            if (reviews.length > 0) {
                const totalReviews = reviews.length;
                document.querySelector('.total_reviews h3').textContent = `${totalReviews} Reviews`;

                // Find the highest rating
                const highestRating = Math.max(...reviews.map(review => review.rating));
                updateStars(highestRating);
                document.querySelector('.highest_reviews').textContent = `${highestRating}`;
            } else {
                document.querySelector('.total_reviews h3').textContent = "No Reviews";
                document.querySelector('.highest_reviews').textContent = "No Ratings";
                updateStars(0);
            }

            function updateStars(score) {
                  let filledStars = '&#9733;'.repeat(score); // Repeat filled star based on review score
                  let emptyStars = '&#9734;'.repeat(5 - score); // Remaining stars will be empty

                  // Set the stars into the container
                  document.querySelector('.highest_review_color').innerHTML = filledStars + emptyStars;
              } 
            // Optionally, you can display the reviews themselves (not required, but useful for debugging)
            reviews.forEach(review => {
                console.log(`Review by ${review.userEmail}: ${review.comment} (Rating: ${review.rating})`);
            });
        })
        .catch(error => {
            console.error('Error fetching reviews:', error);
        });

    // Existing functionality to show the review form
    window.showReviewForm = () => {
        document.getElementById('review-form').style.display = 'block';
        const reviewForm = document.getElementById('review-form');
        const body = document.body;
        reviewForm.classList.toggle('visible');
        
  body.classList.toggle('openpop');
    };

    // Existing functionality for dynamic star rating
    document.querySelectorAll('.dynamic-star').forEach((star) => {
        star.addEventListener('click', (event) => {
            const rating = event.target.getAttribute('data-value');
            document.querySelectorAll('.dynamic-star').forEach((s, index) => {
                s.style.color = index < rating ? '#ffcc00' : '#ccc'; 
            });
            document.getElementById('rating-input').value = rating;
        });
    });
});
document.addEventListener('DOMContentLoaded', () => {
  const closeButton = document.querySelector('.close');
  
  // Handling the star rating click event
  document.querySelectorAll('.dynamic-star').forEach((star) => {
    star.addEventListener('click', (event) => {
      const rating = event.target.getAttribute('data-value');
      
      document.querySelectorAll('.dynamic-star').forEach((s, index) => {
        s.style.color = index < rating ? '#ffcc00' : '#ccc'; 
      });
      
      document.getElementById('rating-input').value = rating;
    });
  });

  // Show review form function
  window.showReviewForm = () => {
    document.getElementById('review-form').style.display = 'block';
    const reviewForm = document.getElementById('review-form');
    const body = document.body;
    reviewForm.classList.toggle('visible');
    body.classList.toggle('openpop');
  };

  // Submit review button click event
  document.getElementById('submitReview').addEventListener('click', async () => {
    console.log("form submit");
    const form = document.getElementById('reviewForm');
    const formData = new FormData(form);
    
    // Check if rating is provided (if rating-input is empty, rating hasn't been selected)
    const rating = document.getElementById('rating-input').value;
    if (!rating) {
      document.getElementById('responseMessage').textContent = 'Please provide a rating before submitting the review.';
      return;  // Stop form submission
    }

    console.log("formData:", formData);
    for (let [key, value] of formData.entries()) {
      console.log(`${key}: ${value}`);
    }

    try {
      const response = await fetch('https://pvc-agent-gonna-saturday.trycloudflare.com/accounts', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();
      console.log("result", result);
      
      if (response.ok) {
        // document.getElementById('responseMessage').textContent = result.message;
        document.getElementById('responseMessage').textContent = 'Thanks for your review!';
        form.reset();
      } else {
        document.getElementById('responseMessage').textContent = `Error: ${result.message}`;
      }
    } catch (error) {
      console.error('Error submitting the form:', error);
      document.getElementById('responseMessage').textContent = 'An unexpected error occurred.';
    }
  }
);
});

</script>



<script>
 
document.querySelectorAll('.review_main').forEach(button => {
  button.addEventListener('click', function() {
    const popup = document.querySelector('.popup');
    popup.style.display = 'block'; // Show the popup (fadeIn equivalent)
    setTimeout(() => {
      popup.style.opacity = 1; // Smooth fade effect using opacity
    }, 10); // Small delay to apply the opacity change after displaying
  });
});

// Get the close button
const closeButton = document.querySelector('.close');
if (closeButton) {
  closeButton.addEventListener('click', function() {
    const popup = document.querySelector('.popup');
    popup.style.opacity = 0; // Fade effect by changing opacity
    setTimeout(() => {
      popup.style.display = 'none'; // Hide the popup after the fade effect
    }, 500); // Match the fade duration
  });
}

</script>
{% schema %}
{
  "name": "new Star Rating",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Product",
      "autofill": true
    },
    {
      "type": "color",
      "id": "colour",
      "label": "Star Colour",
      "default": "#ffcc00"
    }
  ]
}
{% endschema %}
